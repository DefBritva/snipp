{
	"core": {
		"prefix": "genCoreWidget",
		"body": [
			"class ${1:ClassName} extends StatelessWidget {",
			"  const ${1:ClassName}({",
			"    super.key,",
			"  });",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Scaffold(",
			"      backgroundColor: ${2:Color1},",
			"      resizeToAvoidBottomInset: false,",
			"      appBar: AppBar(",
			"        title: Text('${3:title}'),",
			"        backgroundColor: ${4:Color2},",
			"      ),",
			"      body: SafeArea(",
			"        child: Padding(",
			"          padding: EdgeInsets.all(16),",
			"        ),",
			"      ),",
			"    );",
			"  }",
			"}"
		],
		"description": ""
	},
	"form": {
		"prefix": "genForm",
		"body": [
			"class FormWidget extends StatelessWidget {",
			"  const FormWidget(",
			"      {super.key,",
			"      required this.hint,",
			"      this.obsure,",
			"      this.decoration,",
			"      this.controller});",
			"  final TextEditingController? controller;",
			"  final String hint;",
			"  final bool? obsure;",
			"  final InputDecoration? decoration;",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return TextField(",
			"      controller: controller,",
			"      obscureText: obsure ?? false,",
			"      style: TextStyle(color: ${1:TextColor}),",
			"      cursorColor: Colors.white54,",
			"      expands: false,",
			"      decoration: decoration ??",
			"          InputDecoration(",
			"            hintStyle: TextStyle(color: ${1:TextColor}),",
			"            hintText: hint,",
			"            enabledBorder: OutlineInputBorder(",
			"              borderSide: BorderSide(color: ${2:BorderColor}),",
			"              borderRadius: BorderRadius.circular(12),",
			"            ),",
			"            focusedBorder: OutlineInputBorder(",
			"              borderSide: BorderSide(color: ${2:BorderColor}),",
			"              borderRadius: BorderRadius.circular(12),",
			"            ),",
			"          ),",
			"    );",
			"  }",
			"}",
			""
		],
		"description": ""
	},
	"button": {
		"prefix": "genElevatedButton",
		"body": [
			"ElevatedButton(",
			"      onPressed: () {},",
			"      style: ElevatedButton.styleFrom(backgroundColor: ${1:ButtonColor}),",
			"      child: Text(",
			"        '${2:text}',",
			"        style: TextStyle(",
			"          color: ${3:TextColor},",
			"        ),",
			"      ),",
			"    )"
		],
		"description": "core"
	},
	"registr": {
		"prefix": "genRegistration",
		"body": [
			"class RegisterPage extends StatefulWidget {",
			"  const RegisterPage({super.key});",
			"",
			"  @override",
			"  State<RegisterPage> createState() => _RegisterPageState();",
			"}",
			"",
			"class _RegisterPageState extends State<RegisterPage> {",
			"  final emailController = TextEditingController();",
			"  final passwordController = TextEditingController();",
			"  final firstNameController = TextEditingController();",
			"  final lastNameController = TextEditingController();",
			"  final phoneController = TextEditingController();",
			"",
			"  @override",
			"  void dispose() {",
			"    emailController.dispose();",
			"    passwordController.dispose();",
			"    firstNameController.dispose();",
			"    lastNameController.dispose();",
			"    phoneController.dispose();",
			"    super.dispose();",
			"  }",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Scaffold(",
			"      resizeToAvoidBottomInset: false,",
			"      backgroundColor: ${1:PageColor},",
			"      body: SafeArea(",
			"          child: GestureDetector(",
			"        onPanDown: (details) {",
			"          FocusScope.of(context).unfocus();",
			"        },",
			"        child: CustomScrollView(",
			"          slivers: [",
			"            SliverAppBar(",
			"              elevation: 0,",
			"              backgroundColor: ${1:PageColor},",
			"              title: Text(",
			"                'Регистрация',",
			"                style: TextStyle(",
			"                  color: ${2:TextColor},",
			"                  fontSize: 25,",
			"                ),",
			"              ),",
			"              centerTitle: true,",
			"            ),",
			"            SliverFillRemaining(",
			"              child: Padding(",
			"                padding: const EdgeInsets.all(20),",
			"                child: Column(",
			"                  children: [",
			"                    Row(",
			"                      children: [",
			"                        Expanded(",
			"                            child: FormWidget(",
			"                          controller: firstNameController,",
			"                          hint: 'Имя',",
			"                        )),",
			"                        SizedBox(",
			"                          width: 15,",
			"                        ),",
			"                        Expanded(",
			"                            child: FormWidget(",
			"                          controller: lastNameController,",
			"                          hint: 'Фамилия',",
			"                        )),",
			"                      ],",
			"                    ),",
			"                    SizedBox(height: 15),",
			"                    FormWidget(",
			"                      controller: emailController,",
			"                      hint: 'E-mail',",
			"                    ),",
			"                    SizedBox(height: 15),",
			"                    FormWidget(",
			"                      controller: phoneController,",
			"                      hint: 'Номер телефона',",
			"                    ),",
			"                    SizedBox(height: 15),",
			"                    PasswordWidget(",
			"                      controller: passwordController,",
			"                      hint: 'Пароль',",
			"                    ),",
			"                    Expanded(child: SizedBox()),",
			"                    SizedBox(",
			"                        child: ElevatedButton(",
			"                            style: ElevatedButton.styleFrom(",
			"                                backgroundColor: ${3:ButtonColor}),",
			"                            onPressed: () {},",
			"                            child: Text(",
			"                              'Создать аккаунт',",
			"                              style: TextStyle(",
			"                                  fontSize: 14, color: ${4:ButtonTextColor}),",
			"                            ))),",
			"                  ],",
			"                ),",
			"              ),",
			"            )",
			"          ],",
			"        ),",
			"      )),",
			"    );",
			"  }",
			"}",
			"",
			"class FormWidget extends StatelessWidget {",
			"  const FormWidget({",
			"    super.key,",
			"    required this.hint,",
			"    this.obsure,",
			"    this.decoration,",
			"    this.controller,",
			"  });",
			"  final TextEditingController? controller;",
			"  final String hint;",
			"  final bool? obsure;",
			"  final InputDecoration? decoration;",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return TextField(",
			"      controller: controller,",
			"      obscureText: obsure ?? false,",
			"      style: TextStyle(color: ${2:TextColor}),",
			"      cursorColor: Colors.white54,",
			"      expands: false,",
			"      decoration: decoration ??",
			"          InputDecoration(",
			"            hintStyle: TextStyle(color: ${2:TextColor}),",
			"            hintText: hint,",
			"            enabledBorder: OutlineInputBorder(",
			"              borderSide: BorderSide(color: ${5:BorderColor}),",
			"              borderRadius: BorderRadius.circular(12),",
			"            ),",
			"            focusedBorder: OutlineInputBorder(",
			"              borderSide: BorderSide(color: ${5:BorderColor}),",
			"              borderRadius: BorderRadius.circular(12),",
			"            ),",
			"          ),",
			"    );",
			"  }",
			"}",
			"",
			"class PasswordWidget extends StatefulWidget {",
			"  const PasswordWidget({super.key, required this.hint, this.controller});",
			"",
			"  final String hint;",
			"  final TextEditingController? controller;",
			"",
			"  @override",
			"  State<PasswordWidget> createState() => _PasswordWidgetState();",
			"}",
			"",
			"class _PasswordWidgetState extends State<PasswordWidget> {",
			"  bool obsure = true;",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return TextField(",
			"      controller: widget.controller,",
			"      obscureText: obsure,",
			"      style: TextStyle(color: ${2:TextColor}),",
			"      cursorColor: ${5:BorderColor},",
			"      expands: false,",
			"      decoration: InputDecoration(",
			"        suffixIcon: IconButton(",
			"          onPressed: () {",
			"            setState(() {",
			"              obsure = !obsure;",
			"            });",
			"          },",
			"          icon: obsure",
			"              ? Icon(",
			"                  Icons.visibility,",
			"                  color: ${5:BorderColor},",
			"                )",
			"              : Icon(",
			"                  Icons.visibility_off,",
			"                  color: ${5:BorderColor},",
			"                ),",
			"        ),",
			"        hintStyle: TextStyle(color: ${2:TextColor}),",
			"        hintText: widget.hint,",
			"        enabledBorder: OutlineInputBorder(",
			"          borderSide: BorderSide(color: ${5:BorderColor}),",
			"          borderRadius: BorderRadius.circular(12),",
			"        ),",
			"        focusedBorder: OutlineInputBorder(",
			"          borderSide: BorderSide(color: ${5:BorderColor}),",
			"          borderRadius: BorderRadius.circular(12),",
			"        ),",
			"      ),",
			"    );",
			"  }",
			"}",
			""
		],
		"description": "core"
	}
}